[pause_resume]
recover_velocity: 50.

[respond]
default_type: echo

[display_status]
[force_move]
enable_force_move: True


[gcode_macro TIMELAPSE_TAKE_FRAME]
gcode:
 {action_call_remote_method("timelapse_newframe")}

[gcode_macro TIMELAPSE_RENDER]
gcode:
 {action_call_remote_method("timelapse_render")}


#####################################################################
# Print Start/End Macros
#####################################################################

[gcode_macro HOME_IF_NEEDED]
#
# HOME_IF_NEEDED
#
# Perform a homing action only if one of the axes isn't homed.
#
description: Conditional home (i.e., home only if not homed already)
gcode:

    {% set verbose = params.VERBOSE|default(False) %}

    {% if not (('xy' in printer.toolhead.homed_axes) or ('z' in printer.toolhead.homed_axes)) %}
        {% if verbose %}
            { action_respond_info("Homing!") }
        {% endif %}
        G28
    {% endif %}

[gcode_macro PRINT_START]
gcode:
  {% set target_extruder = params.EXTRUDER|int %}
  {% set target_bed = params.BED|int %}
  {% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  {% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  status_homing 
  G32                                                       #tram
  BED_MESH_PROFILE LOAD=default
  G0 X5 Y0 Z10 F5000                              # Goes to primeline
  M107                                             # Turns off partcooling fan
  M109 S{target_extruder}                          # Heats the nozzle to printing temp
  G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  G0 Z0.4                                          # Raises Z to 0.4
  G91                                              # Incremental positioning 
  G1 X100 E20 F1000                                # Purge line
  G90                                              # Absolut position
  status_printing


  ## Set Material-specific Configs
## 
## Add this immediately after your start_print line of the start gcode in Prusa/SuperSlicer:
##     SET_MATERIAL MATERIAL='{filament_type[initial_extruder]}'
## 
## Add this immediately after your start_print line of the start gcode in Cura:
##     SET_MATERIAL MATERIAL='{material_type}'
## 
[gcode_macro SET_MATERIAL]
description: Set values based on material type
variable_material: ''
gcode:
    {% set MATERIAL = params.MATERIAL|default('PLA')|string %} ; Get material type from slicer
    SET_GCODE_VARIABLE MACRO=SET_MATERIAL VARIABLE=material VALUE='"{MATERIAL}'" ; Save the material type to a variable just because
    {% if MATERIAL == 'PLA' %} ; If material type is PLA
        BED_MESH_PROFILE LOAD="default" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
        SET_FAN_SPEED FAN=nevermore SPEED=0
    {% elif MATERIAL == 'ABS' %} ; If material type is ABS
        BED_MESH_PROFILE LOAD="abs" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
        SET_FAN_SPEED FAN=nevermore SPEED=1.0
        {% elif MATERIAL == 'ASA' %} ; If material type is ASA
        BED_MESH_PROFILE LOAD="abs" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
        SET_FAN_SPEED FAN=nevermore SPEED=1.0
    {% elif MATERIAL == 'PETG' %} ; If material type is PETG
        BED_MESH_PROFILE LOAD="petg" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0.035 ; Set z_offset
        SET_FAN_SPEED FAN=nevermore SPEED=0.5
    {%else %} ; If any other material type
        BED_MESH_PROFILE LOAD="default" ; Load bed mesh
        SET_PRESSURE_ADVANCE ADVANCE=0.035 SMOOTH_TIME=0.040 ; Set pressure_advance settings
        SET_GCODE_OFFSET Z=0 ; Set z_offset
        SET_FAN_SPEED FAN=nevermore SPEED=0
    {% endif %}



##[gcode_macro PRINT_START_ABS]
##gcode:
  # This part fetches data from your slicer. Such as bed temp, extruder temp, chamber temp and size of your printer.
  
 ##gcode:
  ##{% set target_extruder = params.EXTRUDER|int %}
  ##{% set target_bed = params.BED|int %}
  ##{% set x_wait = printer.toolhead.axis_maximum.x|float / 2 %}
  ##{% set y_wait = printer.toolhead.axis_maximum.y|float / 2 %}
  ##status_homing 
  ##G32                                                       #tram
  ##BED_MESH_PROFILE LOAD=abs
  ##G0 X0 Y0 Z10 F5000                              # Goes to primeline
  ##M107                                             # Turns off partcooling fan
  ##M109 S{target_extruder}                          # Heats the nozzle to printing temp
  ##G0 X{x_wait - 50} Y4 F10000                      # Moves to starting point
  ##G0 Z0.4                                          # Raises Z to 0.4
  ##G91                                              # Incremental positioning 
  ##G1 X100 E20 F1000                                # Purge line
  ##G90                                              # Absolut position
  ##status_printing

 ## Do heatsoak
   # {% if printer["temperature_sensor chamber"].temperature < chambertemp %}
		  #_HEATSOAK TEMP={bedtemp} MOVE=1                        # Set up to heat soak if chamber temp is set higher than current reading
     # M190 S{bedtemp}                                        # Set target bed temp & wait for it
      #TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={chambertemp}   # Do the actual heat soak wait, until chamber temp is at target
		#{% else %}
			#{% if printer.heater_bed.temperature < (bedtemp-2) %}
       # _HEATSOAK TEMP={bedtemp} MOVE=1	        						# Bed is below target temp, get it heating & safely park toolhead
       # M190 S{bedtemp}                                     # Set bed target temp & wait for it
			#{% else %}
				#_HEATSOAK TEMP={bedtemp} MOVE=0                     # Just do a bed heat, no champer temp (open case for PLA)
			#{% endif %}
		#{% endif %}
		#M106 S0
   

#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
[gcode_macro PRINT_END]
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    status_cooling
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
   
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END

#####################################################################
#  PID Macros
#####################################################################


[gcode_macro PID_BED_65]
description: Start Bed PID 
  
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  status_heating
  {% endif %}
  M106
  G1 Z50 F1500
  RESPOND MSG="Bed PID in progress..."
  PID_CALIBRATE HEATER=heater_bed TARGET={params.TEMP|default(65)}
  G28
  SAVE_CONFIG
  {% endif %}

[gcode_macro PID_HOTEND_220]
description: Start Hotend PID
gcode:
  {% if printer.idle_timeout.state == "Printing" %}
  RESPOND TYPE=error MSG="This macro cannot be used while printing!"
  {% else %}
  {% if printer.toolhead.homed_axes != "xyz" %}
  G28
  status_heating
  {% endif %}
  M106
  G1 Z50 F1500
  RESPOND MSG="Hotend PID in progress..."
  PID_CALIBRATE HEATER=extruder TARGET={params.TEMP|default(220)}
  G28
  SAVE_CONFIG
  {% endif %}




#####################################################################
#   Bed Mesh Macro/Knomi
#####################################################################



[gcode_macro G29]
gcode:
  HOME_IF_NEEDED
  BED_MESH_CALIBRATE
  status_meshing

[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
variable_probing:False
gcode:
 SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=True
 BED_MESH_CALIBRATE_BASE
 SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=probing VALUE=False




####################RESONANCE TEST############################


[gcode_macro G32_QGL]
gcode:
    SAVE_GCODE_STATE NAME=STATE_G32
    status_leveling
    G90
    G28
    QUAD_GANTRY_LEVEL
    G28
    ##  Uncomment for for your size printer:
    #--------------------------------------------------------------------
    ##  Uncomment for 250mm build
    #G0 X125 Y125 Z30 F3600
    
    ##  Uncomment for 300 build
    #G0 X150 Y150 Z30 F3600
    
    ##  Uncomment for 350mm build
    G0 X175 Y175 Z30 F3600
    #--------------------------------------------------------------------
    RESTORE_GCODE_STATE NAME=STATE_G32

#####################################################################
#   Macros
#####################################################################

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped
  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}


[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
variable_park: True
gcode:
  ## Move head and retract only if not already in the pause state and park set to true
  {% if printer.pause_resume.is_paused|lower == 'false' and park|lower == 'true'%}
    _TOOLHEAD_PARK_PAUSE_CANCEL
  {% endif %}
  TURN_OFF_HEATERS
  CANCEL_PRINT_BASE

#[gcode_macro PAUSE]
#description: Pause the actual running print
#rename_existing: PAUSE_BASE
#gcode:
 # PAUSE_BASE
  #_TOOLHEAD_PARK_PAUSE_CANCEL

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0                                  ; disable filament sensor
        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        G1 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} F6000   ; park toolhead at front center
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        M104 S0                                                                              ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}


[gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL]
description: Helper: park toolhead used in PAUSE and CANCEL_PRINT
variable_extrude: 1.0
gcode:
  ##### set park positon for x and y #####
  # default is your max posion from your printer.cfg
  {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set z_park_delta = 10.0 %}
  ##### calculate save lift position #####
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - z_park_delta) %}
    {% set z_safe = z_park_delta %}
  {% else %}
    {% set z_safe = max_z - act_z %}
  {% endif %}
  ##### end of definitions #####
  {% if printer.extruder.can_extrude|lower == 'true' %}
    M83
    G1 E-{extrude} F2100
    {% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  {% if "xyz" in printer.toolhead.homed_axes %}
    G91
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000
    {% if printer.gcode_move.absolute_coordinates|lower == 'false' %} G91 {% endif %}
  {% else %}
    {action_respond_info("Printer not homed")}
  {% endif %}


#[gcode_macro RESUME]
#description: Resume the actual running print
#rename_existing: RESUME_BASE
#gcode:
  ##### read extrude from  _TOOLHEAD_PARK_PAUSE_CANCEL  macro #####
  #{% set extrude = printer['gcode_macro _TOOLHEAD_PARK_PAUSE_CANCEL'].extrude %}
  #### get VELOCITY parameter if specified ####
  #{% if 'VELOCITY' in params|upper %}
    #{% set get_params = ('VELOCITY=' + params.VELOCITY)  %}
  #{%else %}
    #{% set get_params = "" %}
 # {% endif %}
  ##### end of definitions #####
  #{% if printer.extruder.can_extrude|lower == 'true' %}
    #M83
    #G1 E{extrude} F2100
    #{% if printer.gcode_move.absolute_extrude |lower == 'true' %} M82 {% endif %}
 # {% else %}
    #{action_respond_info("Extruder not hot enough")}
  #{% endif %}  
  #RESUME_BASE {get_params}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1                          ; enable filament sensor
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            G1 Z{zhop * -1} E{e} F900                                                ; prime nozzle by E, lower Z back down
        {% else %}
            G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=60                          ; restore position
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro G28]
description: G28 homing with SB LED status
rename_existing: G0028
variable_homing:False

gcode:
 SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=True
 status_homing
    RESPOND MSG="Homing"
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %} ; check if all axes are being homed
    {% if home_all or 'X' in params %} ; if homing all axes or just x
        G0028 X ; home X axis
    {% endif %}
    {% if home_all or 'Y' in params %} ; if homing all axes or just y
        G0028 Y ; home Y axis
    {% endif %}
    {% if home_all or 'Z' in params %} ; if homing all axes or just z
        G0028 Z ; home Z axis
    {% endif %}
    status_ready
 SET_GCODE_VARIABLE MACRO=G28 VARIABLE=homing VALUE=False





#####################################################################
#  Filament change Macros
#####################################################################


[gcode_macro M600]
description: Executes a color change by pausing the printer an unloading the filament.
gcode:
  PAUSE
  UNLOAD_FILAMENT
  M117 Please load new filament and resume
  RESPOND MSG="Please load new filament and resume"

#####################################################################
#   LOAD/Unload Macros
#####################################################################

[gcode_macro UNLOAD_FILAMENT]
description: Unloads the filament. Note: be careful with PETG, make sure you inspect the tip of your filament before reloading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=unload_state
  G91
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Unloading filament...
  # Extract filament to cold end area 
  G0 E-5 F3600
  # Wait for three seconds
  G4 P3000
  # Push back the filament to smash any stringing 
  G0 E5 F3600
  # Extract back fast in to the cold zone 
  G0 E-15 F3600
  # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears       
  G0 E-130 F300
  M117 Filament unloaded!
  RESPOND MSG="Filament unloaded! Please inspect the tip of the filament before reloading."
  RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
description: Loads new filament. Note: be careful with PETG, make sure you inspect the tip of your filament before loading to avoid jams.
gcode:
  SAVE_GCODE_STATE NAME=load_state
  G91
  # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
  {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
    M117 Heating...
    M104 S{params.TEMP|default(220, true)}
    TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
  {% endif %}
  M117 Loading filament...
  # Load the filament into the hotend area.
  G0 E100 F600
  # Wait a secod
  G4 P1000
  # Purge
  G0 E40 F100
  # Wait for purge to complete
  M400e
  M117 Filament loaded!
  RESPOND MSG="Filament loaded!"
  RESTORE_GCODE_STATE NAME=load_state


#####################################################################
#  Nozzle cleaning/priming Macros
#####################################################################

[gcode_macro NOZZLE_CLEAN]
#description: wipes nozzle on brush to clean it
gcode:
  STATUS_CLEANING
  G28 X
  G28 Y
  G90
  G1 X270 Y353 F6000
  G1 Z0.3 F3000
  G1 X305 Y353 F10000
  G1 X270 Y353 F10000
  G1 X305 Y353 F10000
  G1 X270 Y353 F10000
  G1 X305 Y353 F10000
  G1 X270 Y353 F10000
  G1 Z10 F6000

[gcode_macro NOZZLE_CLEAN_NO_HOME]
#description: wipes nozzle on brush to clean it
gcode:
  STATUS_CLEANING
  G90
  G1 X270 Y353 F6000
  G1 Z0.3 F3000
  G1 X305 Y353 F10000
  G1 X270 Y353 F10000
  G1 X305 Y353 F10000
  G1 X270 Y353 F10000
  G1 X305 Y353 F10000
  G1 X270 Y353 F10000
  G1 Z10 F6000


#[gcode_macro NOZZLE_CLEAN]   #old beacon cord route
#description: wipes nozzle on brush to clean it
#gcode:
 # STATUS_CLEANING
  #G28 X
  #G28 Y
  #G90
  #G1 X350 Y345 F2000
  #G1 X295 Y345 F2000
  #G1 X295 Y354.5 F2000
  #G1 Z0.5 F1000
  #G1 X277 Y354.5 F2000
  #G1 X295 Y354.5 F2000
  #G1 X277 Y354.5 F2000
  #G1 X295 Y354.5 F2000
  #G1 X277 Y354.5 F2000
  #G1 X295 Y354.5 F2000
  #G1 X277 Y354.5 F2000
  #G1 X295 Y354.5 F2000
  #G1 X277 Y354.5 F2000
  #G1 Z10 F6000
  #G1 X277 Y345 F2000
  #G28 X
  #G28 Y


[gcode_macro NOZZLE_PRIME]
description: prime the nozzle before printing
gcode:
  G92 E0
  G1 E-3 F1800
  G1 X0 Y0 F10000
  G1 Z0.3 F500
  G92 E0
  G1 E3 F500
  G92 E0
  G1 E-0.30000 F3600
  G1 Z0.2500 F1000
  G1 X350 Y0 E50 F1000 
  G92 E0
  G1 E-0.30000 F5400
  G1 Z10 F500

#####################################################################
#  Movement Macros
#####################################################################


[gcode_macro Frontandcenter]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center
[gcode_macro PARKFRONT]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z{printer.toolhead.axis_maximum.z/2} F6000        
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park front center, but low down.
[gcode_macro PARKFRONTLOW]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKFRONT
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_minimum.y+5} Z20 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKFRONT

# Park top rear left
[gcode_macro PARKREAR]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKREAR
    G90                              ; absolute positioning
    G0 X{printer.toolhead.axis_minimum.x+10} Y{printer.toolhead.axis_maximum.y-10} Z{printer.toolhead.axis_maximum.z-50} F6000     
    RESTORE_GCODE_STATE NAME=PARKREAR

# Park at center of build volume
[gcode_macro PARKCENTER]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKCENTER
    G90                               ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z{printer.toolhead.axis_maximum.z/2} F6000    
    RESTORE_GCODE_STATE NAME=PARKCENTER

# Park 15mm above center of bed
[gcode_macro PARKBED]
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28                           ; home if not already homed
    {% endif %}
    SAVE_GCODE_STATE NAME=PARKBED
    G90                                ; absolute positioning
    G0 X{printer.toolhead.axis_maximum.x/2} Y{printer.toolhead.axis_maximum.y/2} Z15 F6000                                     
    RESTORE_GCODE_STATE NAME=PARKBED

#####################################################################
#  Home/QGL Macro
#####################################################################

[gcode_macro G32]
gcode:
    FORCE_MOVE STEPPER=stepper_z2 DISTANCE=2 VELOCITY=20
    FORCE_MOVE STEPPER=stepper_z1 DISTANCE=2 VELOCITY=20
    BED_MESH_CLEAR
    G28
    QUAD_GANTRY_LEVEL
    NOZZLE_CLEAN
    G28
    G0 X175 Y175 Z20 F18000

[gcode_macro M205]
description: Alternative to Jerk
gcode:
  {% if 'X' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.X|int}
  {% elif 'Y' in params %}
  SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={params.Y|int}
  {% endif %}

